{"ast":null,"code":"// import Stepper from '@mui/material/Stepper';\n// import Step from '@mui/material/Step';\n// import StepButton from '@mui/material/StepButton';\n\n// import Typography from '@mui/material/Typography';\n// import { TextField, Button, Box, Paper } from '@mui/material';\n// import axios from 'axios';\n// import {MenuItem } from '@mui/material';\n// import { Fragment, useContext, useEffect, useState } from 'react';\n\n// import ApiContext from \"../../context/ApiContext\";\n\n// const steps = ['Création du bénéficiaire', 'Affecter une ligne', 'Affecter un forfait'];\n\n// export default function HorizontalNonLinearStepper() {\n//   const [activeStep, setActiveStep] = useState(0);\n//   const [completed, setCompleted] = useState({});\n//   const totalSteps = () => {\n//     return steps.length;\n//   };\n\n//   const completedSteps = () => {\n//     return Object.keys(completed).length;\n//   };\n\n//   const isLastStep = () => {\n//     return activeStep === totalSteps() - 1;\n//   };\n\n//   const allStepsCompleted = () => {\n//     return completedSteps() === totalSteps();\n//   };\n\n//   const handleNext = () => {\n//     const newActiveStep =\n//       isLastStep() && !allStepsCompleted()\n//         ? steps.findIndex((step, i) => !(i in completed))\n//         : activeStep + 1;\n//     setActiveStep(newActiveStep);\n//     setFormData({ ...formData, [steps[activeStep]]: formData });\n//   };\n\n//   const handleBack = () => {\n\n//     setActiveStep((prevActiveStep) => prevActiveStep - 1);\n//     setFormData({ ...formData, [steps[activeStep - 1]]: formData });\n//   };\n\n//   const handleStep = (step) => () => {\n//     setActiveStep(step);\n//   };\n\n//   const handleComplete = async () => {\n//     const newCompleted = completed;\n//     newCompleted[activeStep] = true;\n//     setCompleted(newCompleted);\n\n//     if (allStepsCompleted()) {\n//       try {\n//         // Récupérez les données du formulaire\n//         const formData = {\n//           nom: 'nom', // Valeur du champ nom\n//           prenom: 'prenom', // Valeur du champ prénom\n//           matricule: 'matricule', // Valeur du champ matricule\n//           centreCout:'centrecout',\n//           rfBeneficiaire:'statutBeneficiaire',\n//           rfDirections: 'rfDirection',\n//           // Autres champs du formulaire\n//         };\n\n//         // Envoyez les données au backend en utilisant une requête POST\n//         const response = await axios.post('http:localhost/8089/beneficiaire',formData);\n//         const newBeneficiaryId = response.data.id; \n//         console.log(newBeneficiaryId.id);\n\n//         // Vérifiez la réponse du backend et effectuez des actions en conséquence\n//         if (response.status === 200) {\n//           // L'ajout du bénéficiaire a réussi\n//           console.log('Bénéficiaire ajouté avec succès !');\n//           // Effectuez ici d'autres actions ou affichez un message de succès à l'utilisateur\n//         } else {\n//           // Il y a eu une erreur lors de l'ajout du bénéficiaire\n//           console.log(\"Erreur lors de l'ajout du bénéficiaire\");\n//           // Effectuez ici d'autres actions ou affichez un message d'erreur à l'utilisateur\n//         }\n\n//         // Mettez à jour l'état de la ligne affectée\n//         const ligne_id = formData.ligne_id; // Remplacez \"ligneId\" par le champ approprié qui contient l'ID de la ligne affectée\n//         const updatedLigne = await axios.put(\n//           `http://localhost:8089/lignes/updateLigne`,\n//           { etat: 'affecté' } // Remplacez \"etat\" par le champ approprié qui représente l'état de la ligne\n//         );\n//         setLigneAffectee(updatedLigne.data);\n\n//         // Réinitialisez le formulaire et les étapes\n//         handleReset();\n//       } catch (error) {\n//         // Gérez les erreurs de la requête\n//         console.error(\"Erreur lors de l'appel de l'API d'ajout du bénéficiaire :\", error);\n//         // Effectuez ici d'autres actions ou affichez un message d'erreur à l'utilisateur\n//       }\n//     } else {\n//       handleNext();\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchCentreCout = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8089/centreCouts');\n//         setCentreCout(response.data);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des centres de coût :', error);\n//       }\n//     };\n\n//     fetchCentreCout();\n//   }, []);\n//   useEffect(() => {\n//     const fetchRfBeneficiaires = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8089/rfbeneficiaires');\n//         setRfBeneficiaire(response.data);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des RfBeneficiaires :', error);\n//       }\n//     };\n\n//     fetchRfBeneficiaires();\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchRfDirections = async () => {\n//       try { \n//         const response = await axios.get('http://localhost:8089/rfdirections');\n//         setRfDirections(response.data);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des RfDirections :', error);\n//       }\n//     };\n\n//     fetchRfDirections();\n//   }, []);\n\n//   // useEffect(() => {\n//   //   const fetchLigne = async () => {\n//   //     try { \n//   //       const response = await axios.get('http://localhost:8089/lignes/RFLingWithstatus?status=En%20Stock');\n//   //       setLigne(response.data);\n//   //     } catch (error) {\n//   //       console.error('Erreur lors de la récupération des lignes :', error);\n//   //     }\n//   //   };\n\n//   //   fetchLigne();\n//   // }, []);\n\n//   useEffect(() => {\n//     const fetchForfait = async () => {\n//       try { \n//         const response = await axios.get('http://localhost:8089/forfaits');\n//         setForfait(response.data);\n//       } catch (error) {\n//         console.error('Erreur lors de la récupération des forfaits :', error);\n//       }\n//     };\n\n//     fetchForfait();\n//   }, []);\n//   const [centreCout, setCentreCout] = useState([]);\n//   const [rfDirections, setRfDirections] = useState([]);\n//   const [option_forfait, setOption_forfait] = useState([]);\n//   const [nomForfait, setNomForfait]= useState([]);\n//   const [forfait, setForfait]= useState([]);\n\n//   const handleReset = () => {\n//     setActiveStep(0);\n//     setCompleted({});\n//   };\n\n//   const [formData, setFormData] = useState({\n//     nomForfait: '',\n//     option_forfait: '',\n//     soldeData: '',\n//     soldeAppels:'',\n//     statutforfait:'',\n//     montant:'',\n//     // Autres champs du formulaire\n//   });\n\n//   const renderForm = (step) => {\n//     switch (step) {\n//       case 0:\n//         return (\n//           <form>\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\n//               <TextField label=\"NomForfait\" variant=\"outlined\" fullWidth value= {formData.nomForfait}\n//                onChange={(e) => setFormData({ ...formData, nomForfait: e.target.value })} />\n//               <TextField label=\"soldeData\" variant=\"outlined\" fullWidth\n//               value= {formData.soldeData}\n//               onChange={(e) => setFormData({ ...formData, soldeData: e.target.value })} />\n//             </Box>\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\n//               <TextField label=\"soldeAppels\" variant=\"outlined\" fullWidth \n//               value= {formData.soldeAppels}\n//               onChange={(e) => setFormData({ ...formData, soldeAppels: e.target.value })}/>\n//               <TextField\n//                 label=\"option forfait\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 select\n//                 value= {formData.option_forfait}\n//                onChange={(e) => setFormData({ ...formData, option_forfait: e.target.value })}\n//               >\n\n//               </TextField>\n//             </Box>\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\n//               {/* <TextField\n//                 label=\"statu forfait\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 select\n//                 value= {formData.rfForfait}\n//                onChange={(e) => setFormData({ ...formData, rfForfait: e.target.value })}\n//               >\n//                  {rfForfait.map((rfForfait) => (\n//                       <MenuItem key={rfForfait.id} value={rfForfait.id}>\n//                         {rfForfait.statutforfait}\n//                       </MenuItem>\n//                   ))}\n//               </TextField> */}\n//               <TextField\n//                 label=\"Montant\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 select\n//                 value= {formData.montant}\n//                onChange={(e) => setFormData({ ...formData, montant: e.target.value })}\n//               >\n\n//               </TextField>\n//             </Box>\n//             <Box sx={{display: 'flex', justifyContent: 'flex-end', py: 1}}>\n//             <Button onClick={handleCreerBeneficiaire} variant='contained' disableElevation>Creer</Button>\n//             </Box>\n//           </form>\n//         );\n//       case 1:\n//         return (\n//           <form>\n//             {/* Votre formulaire pour la deuxième étape */}\n//             <TextField\n//           label=\"Les numéros de lignes disponnibles\"\n//           variant=\"outlined\"\n//           fullWidth\n//           select\n//           sx={{ width: '50%' }}\n//           value={formData.numLigne}\n//           onChange={(e) => setFormData({ ...formData, numLigne: e.target.value })}\n//         >\n//           {ligne.map((ligne) => (\n//             <MenuItem key={ligne.id} value={ligne.id}>\n//               {ligne.numLigne}\n//             </MenuItem>\n//           ))}\n//         </TextField>\n\n//           </form>\n//         );\n//       case 2:\n//         return (\n//           <form>\n//             {/* Votre formulaire pour la troisième étape */}\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\n//             <TextField\n//                 label=\"Le forfait\"\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 select\n//                 sx={{ width: '50%' }}\n\n//                 value= {formData.nomForfait}\n//                onChange={(e) => setFormData({ ...formData, nomForfait: e.target.value })}\n//               >\n//                 {forfait.map((forfait : any) => (\n//                   <MenuItem key={forfait.id} value={forfait.id}>\n//                     {forfait.nomForfait}\n//                   </MenuItem>\n//                 ))}\n//               </TextField>\n//               </Box>\n//           </form>\n//         );\n\n//       default:\n//         return null;\n//     }\n//   };\n\n//   const { AjouterForfait, loading} = useContext(ApiContext);\n//   const handleCreerForfait = async () => {\n//     // console.log(\"handleCreerBeneficiaire: \" + formData.rfBeneficiaire);\n//     try {\n//       const data = await AjouterForfait(\n//         {...formData}\n//       );\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   return (\n//     <Box sx={{ width: '100%' }}>\n//       <Paper  sx={{ width: \"100%\", mb: 2, padding: \"1%\" }}>\n//       <Stepper nonLinear activeStep={activeStep}>\n//         {steps.map((label, index) => (\n//           <Step key={label} completed={completed[index]}>\n//             <StepButton color=\"inherit\" onClick={handleStep(index)}>\n//               {label}\n//             </StepButton>\n//           </Step>\n//         ))}\n//       </Stepper>\n//       <Box>\n//         <Box sx={{pt: 2}}>\n//           {renderForm(activeStep)}\n//         </Box>\n//         {allStepsCompleted() ? (\n//           <Fragment>\n//             <Typography sx={{ mt: 2, mb: 1 }}>\n//               All steps completed - you&apos;re finished\n//             </Typography>\n//             <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n//               <Box sx={{ flex: '1 1 auto' }} />\n//               <Button onClick={handleReset}>Reset</Button>\n//             </Box>\n//           </Fragment>\n//         ) : (\n//           <Fragment>\n//             <Box\n//               sx={{\n//                 display: 'flex',\n//                 flexDirection: 'row',\n//                 pt: 2,\n//                 marginTop: '20px',\n//               }}\n//             >\n//               <Button\n//                 color=\"inherit\"\n//                 disabled={activeStep === 0}\n//                 onClick={handleBack}  \n//               >\n//                 Back\n//               </Button>\n//               <Box sx={{ flex: '1 1 auto' }} />\n\n//               {activeStep + 1 === steps.length ?\n//                 <Button onClick={handleComplete}>\n//                   Finish\n//                 </Button> : \n//                 <Button onClick={handleNext}>\n//                   Next\n//                 </Button>\n//               }\n//             </Box>\n//           </Fragment>\n//         )}\n//       </Box>\n//       </Paper>\n//     </Box>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Pc/Desktop/ahmed/src/components/AjouterForfait/AjouterForfait.tsx"],"sourcesContent":["// import Stepper from '@mui/material/Stepper';\r\n// import Step from '@mui/material/Step';\r\n// import StepButton from '@mui/material/StepButton';\r\n\r\n// import Typography from '@mui/material/Typography';\r\n// import { TextField, Button, Box, Paper } from '@mui/material';\r\n// import axios from 'axios';\r\n// import {MenuItem } from '@mui/material';\r\n// import { Fragment, useContext, useEffect, useState } from 'react';\r\n\r\n\r\n// import ApiContext from \"../../context/ApiContext\";\r\n\r\n// const steps = ['Création du bénéficiaire', 'Affecter une ligne', 'Affecter un forfait'];\r\n\r\n// export default function HorizontalNonLinearStepper() {\r\n//   const [activeStep, setActiveStep] = useState(0);\r\n//   const [completed, setCompleted] = useState({});\r\n//   const totalSteps = () => {\r\n//     return steps.length;\r\n//   };\r\n\r\n//   const completedSteps = () => {\r\n//     return Object.keys(completed).length;\r\n//   };\r\n\r\n//   const isLastStep = () => {\r\n//     return activeStep === totalSteps() - 1;\r\n//   };\r\n\r\n//   const allStepsCompleted = () => {\r\n//     return completedSteps() === totalSteps();\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     const newActiveStep =\r\n//       isLastStep() && !allStepsCompleted()\r\n//         ? steps.findIndex((step, i) => !(i in completed))\r\n//         : activeStep + 1;\r\n//     setActiveStep(newActiveStep);\r\n//     setFormData({ ...formData, [steps[activeStep]]: formData });\r\n//   };\r\n\r\n//   const handleBack = () => {\r\n    \r\n//     setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n//     setFormData({ ...formData, [steps[activeStep - 1]]: formData });\r\n//   };\r\n\r\n//   const handleStep = (step) => () => {\r\n//     setActiveStep(step);\r\n//   };\r\n\r\n//   const handleComplete = async () => {\r\n//     const newCompleted = completed;\r\n//     newCompleted[activeStep] = true;\r\n//     setCompleted(newCompleted);\r\n  \r\n//     if (allStepsCompleted()) {\r\n//       try {\r\n//         // Récupérez les données du formulaire\r\n//         const formData = {\r\n//           nom: 'nom', // Valeur du champ nom\r\n//           prenom: 'prenom', // Valeur du champ prénom\r\n//           matricule: 'matricule', // Valeur du champ matricule\r\n//           centreCout:'centrecout',\r\n//           rfBeneficiaire:'statutBeneficiaire',\r\n//           rfDirections: 'rfDirection',\r\n//           // Autres champs du formulaire\r\n//         };\r\n  \r\n//         // Envoyez les données au backend en utilisant une requête POST\r\n//         const response = await axios.post('http:localhost/8089/beneficiaire',formData);\r\n//         const newBeneficiaryId = response.data.id; \r\n//         console.log(newBeneficiaryId.id);\r\n\r\n  \r\n//         // Vérifiez la réponse du backend et effectuez des actions en conséquence\r\n//         if (response.status === 200) {\r\n//           // L'ajout du bénéficiaire a réussi\r\n//           console.log('Bénéficiaire ajouté avec succès !');\r\n//           // Effectuez ici d'autres actions ou affichez un message de succès à l'utilisateur\r\n//         } else {\r\n//           // Il y a eu une erreur lors de l'ajout du bénéficiaire\r\n//           console.log(\"Erreur lors de l'ajout du bénéficiaire\");\r\n//           // Effectuez ici d'autres actions ou affichez un message d'erreur à l'utilisateur\r\n//         }\r\n  \r\n//         // Mettez à jour l'état de la ligne affectée\r\n//         const ligne_id = formData.ligne_id; // Remplacez \"ligneId\" par le champ approprié qui contient l'ID de la ligne affectée\r\n//         const updatedLigne = await axios.put(\r\n//           `http://localhost:8089/lignes/updateLigne`,\r\n//           { etat: 'affecté' } // Remplacez \"etat\" par le champ approprié qui représente l'état de la ligne\r\n//         );\r\n//         setLigneAffectee(updatedLigne.data);\r\n  \r\n//         // Réinitialisez le formulaire et les étapes\r\n//         handleReset();\r\n//       } catch (error) {\r\n//         // Gérez les erreurs de la requête\r\n//         console.error(\"Erreur lors de l'appel de l'API d'ajout du bénéficiaire :\", error);\r\n//         // Effectuez ici d'autres actions ou affichez un message d'erreur à l'utilisateur\r\n//       }\r\n//     } else {\r\n//       handleNext();\r\n//     }\r\n//   };\r\n  \r\n//   useEffect(() => {\r\n//     const fetchCentreCout = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:8089/centreCouts');\r\n//         setCentreCout(response.data);\r\n//       } catch (error) {\r\n//         console.error('Erreur lors de la récupération des centres de coût :', error);\r\n//       }\r\n//     };\r\n  \r\n//     fetchCentreCout();\r\n//   }, []);\r\n//   useEffect(() => {\r\n//     const fetchRfBeneficiaires = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:8089/rfbeneficiaires');\r\n//         setRfBeneficiaire(response.data);\r\n//       } catch (error) {\r\n//         console.error('Erreur lors de la récupération des RfBeneficiaires :', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchRfBeneficiaires();\r\n//   }, []);\r\n\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const fetchRfDirections = async () => {\r\n//       try { \r\n//         const response = await axios.get('http://localhost:8089/rfdirections');\r\n//         setRfDirections(response.data);\r\n//       } catch (error) {\r\n//         console.error('Erreur lors de la récupération des RfDirections :', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchRfDirections();\r\n//   }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   const fetchLigne = async () => {\r\n//   //     try { \r\n//   //       const response = await axios.get('http://localhost:8089/lignes/RFLingWithstatus?status=En%20Stock');\r\n//   //       setLigne(response.data);\r\n//   //     } catch (error) {\r\n//   //       console.error('Erreur lors de la récupération des lignes :', error);\r\n//   //     }\r\n//   //   };\r\n\r\n//   //   fetchLigne();\r\n//   // }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchForfait = async () => {\r\n//       try { \r\n//         const response = await axios.get('http://localhost:8089/forfaits');\r\n//         setForfait(response.data);\r\n//       } catch (error) {\r\n//         console.error('Erreur lors de la récupération des forfaits :', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchForfait();\r\n//   }, []);\r\n//   const [centreCout, setCentreCout] = useState([]);\r\n//   const [rfDirections, setRfDirections] = useState([]);\r\n//   const [option_forfait, setOption_forfait] = useState([]);\r\n//   const [nomForfait, setNomForfait]= useState([]);\r\n//   const [forfait, setForfait]= useState([]);\r\n  \r\n\r\n//   const handleReset = () => {\r\n//     setActiveStep(0);\r\n//     setCompleted({});\r\n//   };\r\n \r\n//   const [formData, setFormData] = useState({\r\n//     nomForfait: '',\r\n//     option_forfait: '',\r\n//     soldeData: '',\r\n//     soldeAppels:'',\r\n//     statutforfait:'',\r\n//     montant:'',\r\n//     // Autres champs du formulaire\r\n//   });\r\n\r\n\r\n//   const renderForm = (step) => {\r\n//     switch (step) {\r\n//       case 0:\r\n//         return (\r\n//           <form>\r\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\r\n//               <TextField label=\"NomForfait\" variant=\"outlined\" fullWidth value= {formData.nomForfait}\r\n//                onChange={(e) => setFormData({ ...formData, nomForfait: e.target.value })} />\r\n//               <TextField label=\"soldeData\" variant=\"outlined\" fullWidth\r\n//               value= {formData.soldeData}\r\n//               onChange={(e) => setFormData({ ...formData, soldeData: e.target.value })} />\r\n//             </Box>\r\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\r\n//               <TextField label=\"soldeAppels\" variant=\"outlined\" fullWidth \r\n//               value= {formData.soldeAppels}\r\n//               onChange={(e) => setFormData({ ...formData, soldeAppels: e.target.value })}/>\r\n//               <TextField\r\n//                 label=\"option forfait\"\r\n//                 variant=\"outlined\"\r\n//                 fullWidth\r\n//                 select\r\n//                 value= {formData.option_forfait}\r\n//                onChange={(e) => setFormData({ ...formData, option_forfait: e.target.value })}\r\n//               >\r\n                \r\n//               </TextField>\r\n//             </Box>\r\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\r\n//               {/* <TextField\r\n//                 label=\"statu forfait\"\r\n//                 variant=\"outlined\"\r\n//                 fullWidth\r\n//                 select\r\n//                 value= {formData.rfForfait}\r\n//                onChange={(e) => setFormData({ ...formData, rfForfait: e.target.value })}\r\n//               >\r\n//                  {rfForfait.map((rfForfait) => (\r\n//                       <MenuItem key={rfForfait.id} value={rfForfait.id}>\r\n//                         {rfForfait.statutforfait}\r\n//                       </MenuItem>\r\n//                   ))}\r\n//               </TextField> */}\r\n//               <TextField\r\n//                 label=\"Montant\"\r\n//                 variant=\"outlined\"\r\n//                 fullWidth\r\n//                 select\r\n//                 value= {formData.montant}\r\n//                onChange={(e) => setFormData({ ...formData, montant: e.target.value })}\r\n//               >\r\n                \r\n//               </TextField>\r\n//             </Box>\r\n//             <Box sx={{display: 'flex', justifyContent: 'flex-end', py: 1}}>\r\n//             <Button onClick={handleCreerBeneficiaire} variant='contained' disableElevation>Creer</Button>\r\n//             </Box>\r\n//           </form>\r\n//         );\r\n//       case 1:\r\n//         return (\r\n//           <form>\r\n//             {/* Votre formulaire pour la deuxième étape */}\r\n//             <TextField\r\n//           label=\"Les numéros de lignes disponnibles\"\r\n//           variant=\"outlined\"\r\n//           fullWidth\r\n//           select\r\n//           sx={{ width: '50%' }}\r\n//           value={formData.numLigne}\r\n//           onChange={(e) => setFormData({ ...formData, numLigne: e.target.value })}\r\n//         >\r\n//           {ligne.map((ligne) => (\r\n//             <MenuItem key={ligne.id} value={ligne.id}>\r\n//               {ligne.numLigne}\r\n//             </MenuItem>\r\n//           ))}\r\n//         </TextField>\r\n\r\n             \r\n//           </form>\r\n//         );\r\n//       case 2:\r\n//         return (\r\n//           <form>\r\n//             {/* Votre formulaire pour la troisième étape */}\r\n//             <Box sx={{ display: 'flex', gap: '20px', margin: '10px' }}>\r\n//             <TextField\r\n//                 label=\"Le forfait\"\r\n//                 variant=\"outlined\"\r\n//                 fullWidth\r\n//                 select\r\n//                 sx={{ width: '50%' }}\r\n                \r\n//                 value= {formData.nomForfait}\r\n//                onChange={(e) => setFormData({ ...formData, nomForfait: e.target.value })}\r\n//               >\r\n//                 {forfait.map((forfait : any) => (\r\n//                   <MenuItem key={forfait.id} value={forfait.id}>\r\n//                     {forfait.nomForfait}\r\n//                   </MenuItem>\r\n//                 ))}\r\n//               </TextField>\r\n//               </Box>\r\n//           </form>\r\n//         );\r\n       \r\n//       default:\r\n//         return null;\r\n//     }\r\n//   };\r\n\r\n//   const { AjouterForfait, loading} = useContext(ApiContext);\r\n//   const handleCreerForfait = async () => {\r\n//     // console.log(\"handleCreerBeneficiaire: \" + formData.rfBeneficiaire);\r\n//     try {\r\n//       const data = await AjouterForfait(\r\n//         {...formData}\r\n//       );\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <Box sx={{ width: '100%' }}>\r\n//       <Paper  sx={{ width: \"100%\", mb: 2, padding: \"1%\" }}>\r\n//       <Stepper nonLinear activeStep={activeStep}>\r\n//         {steps.map((label, index) => (\r\n//           <Step key={label} completed={completed[index]}>\r\n//             <StepButton color=\"inherit\" onClick={handleStep(index)}>\r\n//               {label}\r\n//             </StepButton>\r\n//           </Step>\r\n//         ))}\r\n//       </Stepper>\r\n//       <Box>\r\n//         <Box sx={{pt: 2}}>\r\n//           {renderForm(activeStep)}\r\n//         </Box>\r\n//         {allStepsCompleted() ? (\r\n//           <Fragment>\r\n//             <Typography sx={{ mt: 2, mb: 1 }}>\r\n//               All steps completed - you&apos;re finished\r\n//             </Typography>\r\n//             <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n//               <Box sx={{ flex: '1 1 auto' }} />\r\n//               <Button onClick={handleReset}>Reset</Button>\r\n//             </Box>\r\n//           </Fragment>\r\n//         ) : (\r\n//           <Fragment>\r\n//             <Box\r\n//               sx={{\r\n//                 display: 'flex',\r\n//                 flexDirection: 'row',\r\n//                 pt: 2,\r\n//                 marginTop: '20px',\r\n//               }}\r\n//             >\r\n//               <Button\r\n//                 color=\"inherit\"\r\n//                 disabled={activeStep === 0}\r\n//                 onClick={handleBack}  \r\n//               >\r\n//                 Back\r\n//               </Button>\r\n//               <Box sx={{ flex: '1 1 auto' }} />\r\n              \r\n//               {activeStep + 1 === steps.length ?\r\n//                 <Button onClick={handleComplete}>\r\n//                   Finish\r\n//                 </Button> : \r\n//                 <Button onClick={handleNext}>\r\n//                   Next\r\n//                 </Button>\r\n//               }\r\n//             </Box>\r\n//           </Fragment>\r\n//         )}\r\n//       </Box>\r\n//       </Paper>\r\n//     </Box>\r\n//   );\r\n// }"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}